{"ast":null,"code":"// import { useState } from \"react\";\n// import styled from \"styled-components\";\n// const { Configuration, OpenAIApi } = require(\"openai\");\n\n// const configuration = new Configuration({\n//     apiKey: \"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\",\n// });\n// const openai = new OpenAIApi(configuration);\n\n// const Wrapper = styled.div`\n// `;\n\n// const Banner = styled.div`\n//   height: 100vh;\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: center;\n//   padding: 60px;\n//   background-size: cover;\n// `;\n\n// const ChatContent = styled.div`\n//   height: 350px;\n//   overflow-y: scroll;\n// `;\n\n// const Line = styled.div`\n//   margin-top: 10px;\n//   display: flex;\n//   flex-direction: column;\n// `;\n\n// const ChatBoxAI = styled.span`\n//   background-color: #eee;\n//   padding: 5px;\n//   max-width: 200px;\n// `;\n\n// const ChatBoxMine = styled(ChatBoxAI)`\n//   margin-left: auto;\n// `;\n\n// const ChatFormBox = styled.form`\n// `;\n\n// const ChatInputBox = styled.input`\n// `;\n\n// const ChatSendButton = styled.button`\n\n// `;\n\n// function Chat() {\n//     const [aiChat, setAiChat] = useState();\n//     const [myChat, setMyChat] = useState();\n//     const [loading, setLoading] = useState(false);\n\n//     const sendSumit = (e: any) => {\n//         e.preventDefault();\n//         setMyChat(e.target.myText.value);\n//         setLoading(false);\n//         openai.createCompletion({\n//             model: \"text-davinci-003\",\n//             prompt: e.target.myText.value,\n//             temperature: 0.7,\n//             max_tokens: 256,\n//             top_p: 1,\n//             frequency_penalty: 0,\n//             presence_penalty: 0,\n//         }).then((result: any) => {\n//             setLoading(true);\n//             setAiChat(result.data.choices[0].text)\n//         })\n//     }\n\n//     return (\n//         <Wrapper>\n//             <Banner>\n//                 <ChatContent>\n//                     <Line>\n//                         <ChatBoxAI>어디가 궁금하신가요??</ChatBoxAI>\n//                     </Line>\n//                     <Line>\n//                         <ChatBoxMine>{myChat}</ChatBoxMine>\n//                     </Line>\n//                     <Line>\n//                         {loading ?\n//                             <ChatBoxAI>{aiChat}</ChatBoxAI>\n//                             :\n//                             <ChatBoxAI>...</ChatBoxAI>\n//                         }\n//                     </Line>\n//                 </ChatContent>\n//                 <ChatFormBox onSubmit={sendSumit}>\n//                     <ChatInputBox name=\"myText\" />\n//                     <ChatSendButton>\n//                         보내기\n//                     </ChatSendButton>\n//                 </ChatFormBox>\n//             </Banner>\n//         </Wrapper>\n//     );\n// }\n\n// export default Chat;","map":{"version":3,"names":[],"sources":["/Users/gwagminseong/Documents/github/리액트 각각 레포/travel/src/Chat.tsx"],"sourcesContent":["// import { useState } from \"react\";\n// import styled from \"styled-components\";\n// const { Configuration, OpenAIApi } = require(\"openai\");\n\n// const configuration = new Configuration({\n//     apiKey: \"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\",\n// });\n// const openai = new OpenAIApi(configuration);\n\n// const Wrapper = styled.div`\n// `;\n\n// const Banner = styled.div`\n//   height: 100vh;\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: center;\n//   padding: 60px;\n//   background-size: cover;\n// `;\n\n// const ChatContent = styled.div`\n//   height: 350px;\n//   overflow-y: scroll;\n// `;\n\n// const Line = styled.div`\n//   margin-top: 10px;\n//   display: flex;\n//   flex-direction: column;\n// `;\n\n// const ChatBoxAI = styled.span`\n//   background-color: #eee;\n//   padding: 5px;\n//   max-width: 200px;\n// `;\n\n// const ChatBoxMine = styled(ChatBoxAI)`\n//   margin-left: auto;\n// `;\n\n// const ChatFormBox = styled.form`\n// `;\n\n// const ChatInputBox = styled.input`\n// `;\n\n// const ChatSendButton = styled.button`\n\n// `;\n\n\n// function Chat() {\n//     const [aiChat, setAiChat] = useState();\n//     const [myChat, setMyChat] = useState();\n//     const [loading, setLoading] = useState(false);\n\n//     const sendSumit = (e: any) => {\n//         e.preventDefault();\n//         setMyChat(e.target.myText.value);\n//         setLoading(false);\n//         openai.createCompletion({\n//             model: \"text-davinci-003\",\n//             prompt: e.target.myText.value,\n//             temperature: 0.7,\n//             max_tokens: 256,\n//             top_p: 1,\n//             frequency_penalty: 0,\n//             presence_penalty: 0,\n//         }).then((result: any) => {\n//             setLoading(true);\n//             setAiChat(result.data.choices[0].text)\n//         })\n//     }\n\n//     return (\n//         <Wrapper>\n//             <Banner>\n//                 <ChatContent>\n//                     <Line>\n//                         <ChatBoxAI>어디가 궁금하신가요??</ChatBoxAI>\n//                     </Line>\n//                     <Line>\n//                         <ChatBoxMine>{myChat}</ChatBoxMine>\n//                     </Line>\n//                     <Line>\n//                         {loading ?\n//                             <ChatBoxAI>{aiChat}</ChatBoxAI>\n//                             :\n//                             <ChatBoxAI>...</ChatBoxAI>\n//                         }\n//                     </Line>\n//                 </ChatContent>\n//                 <ChatFormBox onSubmit={sendSumit}>\n//                     <ChatInputBox name=\"myText\" />\n//                     <ChatSendButton>\n//                         보내기\n//                     </ChatSendButton>\n//                 </ChatFormBox>\n//             </Banner>\n//         </Wrapper>\n//     );\n// }\n\n// export default Chat;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}